// Apply necessary plugins
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'  // Compatible version range for Forge
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

// Define project version and group
version = mod_version  // e.g., '1.0.0'
group = mod_group_id   // e.g., 'com.example.mymod'

// Set the base archives name
base {
    archivesName = mod_id  // e.g., 'mymod'
}

// Configure Java toolchain for Java 21 (required for Minecraft 1.20.5+)
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

// Print Java, JVM, and architecture information for debugging
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

// Minecraft configuration block
minecraft {
    // Use official mappings for Minecraft 1.20.5+
    mappings channel: 'official', version: minecraft_version  // e.g., '1.20.5'

    // Disable automatic reobf tasks since we're using official mappings
    reobf = false

    // Enable copying IDE resources for proper resource handling in IDEs
    copyIdeResources = true

    // Define run configurations for client, server, and data generation
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include generated resources in the main source set
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Repositories
repositories {
    mavenCentral()
    maven { url 'https://maven.minecraftforge.net/' }
}

// Dependencies block
dependencies {
    // Specify the Forge version for the targeted Minecraft version
    minecraft "net.minecraftforge:forge:1.16.5-36.2.0"  // e.g., '1.20.5-45.0.0'

    // Hack fix for jopt-simple version conflict (Mojang uses 5.0.4, some dependencies may request 6.0+)
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

}

// Process resources to expand properties in mods.toml and pack.mcmeta
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Configure JAR manifest with mod details
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors
        ])
    }
}

// Publishing configuration (optional, for deploying to a repository)
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

// Set encoding for Java compilation
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// Eclipse-specific configuration
eclipse {
    synchronizationTasks 'genEclipseRuns'
}

// Merge resources and classes into the same directory for Java module compatibility
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}